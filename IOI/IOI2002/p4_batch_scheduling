import java.io.*;
import java.util.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class batchScheduling {
    public static void main(String[] args) throws IOException {
        //BufferedReader br = new BufferedReader(new FileReader("filename.in")); 
        //PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("filename.out")));
        PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
        
        int n = readInt();
        long s = readInt();
        long[] ssaT = new long[n+1];
        long[] ssaF = new long[n+1];
        for(int i = 0; i < n; i++) {
            ssaT[i] = readInt();
            ssaF[i] = readInt();
        }
        for(int i = n-2; i >= 0; i--) {
            ssaT[i] += ssaT[i+1];
            ssaF[i] += ssaF[i+1];
        }
        
        long minCost = 0;
        LineContainer q = new LineContainer(n+1);
        q.add(0, 0);
        for(int k = n-1; k >= 0; k--) {
            minCost = (s+ssaT[k])*ssaF[k] + q.minValue(ssaF[k]);
            q.add(-ssaT[k], minCost);
        }

        out.println(minCost);
        out.close();
    }
    
    private static final class LineContainer {
		private final int capacity;
		private final long[] slopes;
		private final long[] yInts;
		private int lines = 0;
		private int idx = 0;

		public LineContainer(final int capacity) {
			this.capacity = capacity;
			this.slopes = new long[capacity];
			this.yInts = new long[capacity];
		}

		public void add(final long slope, final long yInt) {
			while (lines >= 2 && intersectionX(slopes[lines - 2], yInts[lines - 2], slope,
					yInt) < intersectionX(slopes[lines - 2], yInts[lines - 2], slopes[lines - 1], yInts[lines - 1])) {
				--lines;
			}
			slopes[lines] = slope;
			yInts[lines++] = yInt;
		}

		public long minValue(final long x) {
			while (idx + 1 < lines && slopes[idx + 1] * x + yInts[idx + 1] <= slopes[idx] * x + yInts[idx]) {
				++idx;
			}
			return slopes[idx] * x + yInts[idx];
		}

		public int getCapacity() {
			return this.capacity;
		}

		public int getSize() {
			return this.lines;
		}

		public boolean isEmpty() {
			return this.lines == 0;
		}

		private static long intersectionX(final long slope1, final long yInt1, final long slope2, final long yInt2) {
			return (yInt2 - yInt1) / (slope1 - slope2);
		}
	}
    
	private static final int BUFFER_SIZE = 1 << 16;
	private static final InputStream in = System.in;
	private static final byte[] buffer = new byte[BUFFER_SIZE];
	private static int bufferPointer = 0, bytesRead = 0;

	public static int readInt() {
		int ret = 0;
		byte c = Read();
		while (c <= ' ')
			c = Read();
		boolean neg = (c == '-');
		if (neg)
			c = Read();
		do {
			ret = ret * 10 + c - '0';
		} while ((c = Read()) >= '0' && c <= '9');
		if (neg)
			return -ret;
		return ret;
	}

	private static void fillBuffer() {
		try {
			bytesRead = in.read(buffer, bufferPointer = 0, BUFFER_SIZE);
			if (bytesRead == -1)
				buffer[0] = -1;
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}

	private static byte Read() {
		if (bufferPointer == bytesRead)
			fillBuffer();
		return buffer[bufferPointer++];
	}
}