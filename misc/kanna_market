#include <bits/stdc++.h>
using namespace std;
#define ll long long

// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// template<class T>
// using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; 
// Tree<ll> tr;

#define int long long
#define pii pair<int, int>
#define pll pair<ll, ll>

// #define scanu(x) do{while((x=getchar())<'0'); for(x-='0'; '0'<=(_=getchar()); x=(x<<3)+(x<<1)+_-'0');}while(0)
// char _;

const int MAXN = 1000005;
const ll MOD = 1000000007;
// const ll BFN = (ll)1e17;
const int BFN = (int)1e8;
int n, m;
int a[MAXN][3];

ll fastExp(ll n, ll p) {
    ll ans = 1;
    ll cur = n;
    
    while(p != 0) {
        if(p % 2 == 1) {
            ans = (ans * cur) % MOD;
        }
        
        cur = (cur * cur) % MOD;
        p /= 2;
    }
    return ans;
}

void sol() {
    cin >> n >> m;
    for(int i = 1; i <= n; i++) {
        cin >> a[i][1];
    }
    for(int i = 1; i <= n; i++) {
        cin >> a[i][2];
    }

    //odd columns
    int maxSum = -1, maxSingle = -1, minSingle = BFN, cntEmpty = 0;
    for(int i = 1; i <= n; i+=2) {
        if(a[i][1] != 0 && a[i][2] != 0) {
            if(maxSum != -1 && a[i][1] + a[i][2] != maxSum) {
                cout << "0\n";
                return;
            }

            maxSum = a[i][1] + a[i][2];
        }
        else if(a[i][1] != 0){
            maxSingle = max(maxSingle, a[i][1]);
            minSingle = min(minSingle, a[i][1]);
        }
        else if(a[i][2] != 0) {
            maxSingle = max(maxSingle, a[i][2]);
            minSingle = min(minSingle, a[i][2]);
        }
        else {
            cntEmpty++;
        }
    }

    ll ansOdd = 0;
    if(maxSum != -1) {
        int smallest = max(1LL, maxSum - m);
        int largest = maxSum - smallest;
        ll tot = largest - smallest + 1;

        if(maxSingle >= maxSum || minSingle + m < maxSum) {
            cout << "0\n";
            return;
        } 
        ansOdd = fastExp(tot, cntEmpty);
    }
    else if(minSingle == BFN) {
        for(int i = 2; i <= 2*m; i++) {
            int smallest = max(1LL, i - m);
            int largest = i - smallest;
            ll tot = largest - smallest + 1;

            ansOdd = (ansOdd + fastExp(tot, cntEmpty)) % MOD;
        }
    }
    else{
        for(int i = 2; i <= 2*m; i++) {
            if(maxSingle >= i) continue;
            if(minSingle + m < i) break;

            int smallest = max(1LL, i - m);
            int largest = i - smallest;
            ll tot = largest - smallest + 1;

            ansOdd = (ansOdd + fastExp(tot, cntEmpty)) % MOD;
        }
    }

    //even
    maxSum = -1; maxSingle = -1; minSingle = BFN; cntEmpty = 0;
    for(int i = 2; i <= n; i+=2) {
        if(a[i][1] != 0 && a[i][2] != 0) {
            if(maxSum != -1 && a[i][1] + a[i][2] != maxSum) {
                cout << "0\n";
                return;
            }

            maxSum = a[i][1] + a[i][2];
        }
        else if(a[i][1] != 0){
            maxSingle = max(maxSingle, a[i][1]);
            minSingle = min(minSingle, a[i][1]);
        }
        else if(a[i][2] != 0) {
            maxSingle = max(maxSingle, a[i][2]);
            minSingle = min(minSingle, a[i][2]);
        }
        else {
            cntEmpty++;
        }
    }

    ll ansEven = 0;
    if(maxSum != -1) {

        int smallest = max(1LL, maxSum - m);
        int largest = maxSum - smallest;
        ll tot = largest - smallest + 1;

        if(maxSingle >= maxSum || minSingle + m < maxSum) {
            cout << "0\n";
            return;
        } 
        ansEven = fastExp(tot, cntEmpty);
    }
    else if(minSingle == BFN) {
        for(int i = 2; i <= 2*m; i++) {
            int smallest = max(1LL, i - m);
            int largest = i - smallest;
            ll tot = largest - smallest + 1;

            ansEven = (ansEven + fastExp(tot, cntEmpty)) % MOD;
        }
    }
    else{
        for(int i = 2; i <= 2*m; i++) {
            if(maxSingle >= i) continue;
            if(minSingle + m < i) break;

            int smallest = max(1LL, i - m);
            int largest = i - smallest;
            ll tot = largest - smallest + 1;

            ansEven = (ansEven + fastExp(tot, cntEmpty)) % MOD;
        }
    }

    ll ret = (ansEven * ansOdd) % MOD;
    if(ret < 0) ret += MOD;
    cout << ret << "\n";
}

int32_t main(){
    //freopen("main_file.in", "r", stdin);
	//freopen("main_file.out", "w", stdout);
    cin.sync_with_stdio(0);
    cin.tie(0);

    sol();

    return 0;
}